################################################################################
# Copyright (c) 2008 Andy Jefferson and others. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Contributors:
#     ...
#
# Resources for org.datanucleus.store.mapped package
################################################################################

#
# Schema Mapping, columns etc
#
020003=Columns "{0} " have been defined with {1} columns, yet there are only {2} to map to!
020004=Columns "{0}" has a column "{1}" which has been defined to map to column "{2}" but this doesn't exist!
020005=Columns "{0}" column number {1} has no remaining columns to map to!
020006=Columns "{0}" has a column "{1}" that has been mapped twice!
020007=Duplicate column name "{0}" defined for table "{1}". You cannot map multiple fields to the same column. The duplicated columns are specified by {2} and {3}.
020008=? datastore-identity|index columns|other non mapped to any field ?

020015=Exceeded maximum of {0} foreign keys for table {1}
020016=Exceeded maximum of {0} index keys for table {1}


020185=Field "{0}" should be using "subclass-table" inheritance strategy yet isnt. Please report this.
020186=Field "{0}" is declared type requiring multiple FKs and has had its column(s) specified, however the number of columns specified ({1}) is not the same as the number of possible FKs for this field ({2}).
020187=Added column for type "{0}" for field "{1}" (field declared as using subclass-table)
020188=Added column for type "{0}" for field "{1}" (field declared as reference type - interface/Object)
020189=Field "{0}" is defined as a reference type (interface or Object) and was specified as being implemented by class "{1}" but this class was not found!
020190=Field "{0}" is defined as a reference type (interface or Object) ("{1}") and was specified as being implemented by class "{2}" but this is an interface!

#
# Identifiers
#
039000=Case Identifier "{0}" is not supported. Please choose a supported case
039001=Identifier Factory required identifiers in "{0}" but datastore adapter doesnt support this exactly, so using "{1}" instead
039002=Identifier Factory requires identifiers in "{0}" but this is impossible with the current datastore adapter.


055009=Object "{0}" has field "{1}" with a 1-N bidirectional relation and adding element "{2}" so setting the owner of the element.
055010=Object "{0}" has a 1-N bidirectional collection field "{1}" and having element removed. Element "{2}" is having its owner field nulled.

#
# SCO
#
056000=The field "{0}" has been declared as being an array, yet there is no <array> MetaData specified!
056001=The field "{0}" has been declared as being a collection, yet there is no <collection> MetaData specified!
056002=The field "{0}" has been declared as being a map, yet there is no <map> MetaData specified!
056003=The MetaData for the element class "{0}" of the collection field "{1}" was not found.
056004=The MetaData for the value class "{0}" of the map field "{1}" was not found.
056005=Iterator query statement is null !!
056006=Iteration request failed : {0}
056007=Size request failed : {0}
056008=Contains request failed : {0}
056009=Add request failed : {0}
056010=Update embedded key failed : {0}
056011=Update embedded value failed : {0}
056012=Remove request failed : {0}
056013=Clear request failed : {0}
056014=Get request failed : {0}
056015=Set request failed : {0}
056016=Put request failed : {0}
056017=IndexOf request failed : {0}
056018=ContainsKey request failed : {0}
056019=ContainsValue request failed : {0}
056020=MaxAdapterColumnId request failed : {0}
056021=Can't query over a Collection of second-class elements.
056022=Can't query over a Map of second-class elements.
056023=GetIndices failed : One or more elements specified doesnt exist : {0}

056024=Field "{0}" has been defined as "mapped-by" the field "{1}" yet this "mapped-by" field doesn't exist in the class "{2}".
056025=Field "{0}" has been defined as "mapped-by" field "{1}" yet this is of an incorrect type ({2}). The field that is set as the "mapped-by" must be of type "{3}"
056026=The owner field {0} of element class {1} has an incorrect type "{2}". Should be "{3}"
056027=Could not update the foreign key using statement : {0}
#
# SCO Collection
#
056028=Collection field "{0}" has been specified to contain the element "{1}" unembedded yet this is already identified as being stored embedded in a different field. This is invalid. You can't store the same object embedded and unembedded!

056029=Class "{0}" has collection field "{1}" and this has no mapping in the table for the element class "{2}" owner field "{3}"
056030=Class "{0}" has collection field "{1}" and this has no mapping in the table for the element class "{2}"

056031=The field "{0}" is a collection field where the elements use "subclass-table" inheritance strategy and where there are more than 1 subclass where the element is persisted. DataNucleus doesnt currently support this situation.
056032=Collection has been defined with elements of an interface type "{0}" and there are more than 1 implementation for this interface type found. DataNucleus doesnt currently support use of interface where there is more than 1 interface implementation.

056033=Class {0} is not a valid element type for this collection (Field "{1}"). Must be "{2}" or subclass

056034=Removal of element(s) from FK Collection deletes the element(s) since the field is "dependent"
056035=Removal of element(s) from FK Collection deletes the element(s) since owner/index columns weren't nullable
056036=Removal of element(s) from FK Collection nulls the FK while leaving the element(s) intact.

056037=Object "{0}" has a collection "{1}" yet element "{2}" doesnt have the owner set. Managing the relation and setting the owner.
056038=Object "{0}" has a collection "{1}" yet element "{2}" has its owner set to "{3}". This is inconsistent and needs correcting.

#
# SCO Set
#
056039=Null elements not allowed in persistent sets.
056040=Collection field "{0}" was asked to add element "{1}" to the M-N relation but the element already has this field in its collection

#
# SCO List
#
056041=Class "{0}" has collection field "{1}" and this has no mapping in the table for the index of the element class "{2}". Maybe you declared the field as a java.util.Collection and instantiated it as a java.util.List yet omitted the <order> element in the MetaData ?
056042=Remove of element from Inverse List deleted the element since owner/index columns weren't nullable
056043=Remove of element from Inverse List removed the element from the List while leaving the element intact.
056044=Field "{0}" has been instantiated as a List using a join table yet the join table has no "ordering" column. Please specify the <order> tag in the MetaData.

#
# SCO Array
#
056045=The field "{0}" is an array field where the elements use "subclass-table" inheritance strategy and where there are more than 1 subclass where the element is persisted. DataNucleus doesnt currently support this situation.
056046=Class "{0}" has array field "{1}" and this has no mapping in the table for the element class "{2}" owner field "{3}"
056047=Class "{0}" has array field "{1}" and this has no mapping in the table for the element class "{2}"
056048=Class "{0}" has array field "{1}" and this has no mapping in the table for the index of the element class "{2}"
056049=Array is of an interface type "{0}" and there are more than 1 implementation for this interface type found. DataNucleus doesnt currently support use of interface where there is more than 1 interface implementation.

#
# SCO Map
#
056050=The Map "{0}" has been specified without a key "mapped-by" field. You must specify a <key mapped-by=...> since the key is a field in the value class.
056051=The Map "{0}" has been specified with a key type of "{1}" yet the field of the key in the value class is of type "{2}"!
056052=Value class "{0}" has been defined to contain a field "{1}" that represents the key of the map but this field was not found!

056053=Class "{0}" has map field "{1}" and this has no mapping in the table for the value class "{2}" key field "{3}"
056054=Class "{0}" has map field "{1}" and this has no mapping in the table for the key class "{2}" value field "{3}"
056055=The owner field {0} of value class {1} has an incorrect type "{2}". Should be "{3}"
056056=Class "{0}" has map field "{1}" and this has no mapping in the table for the value class "{2}"

056057=The Map "{0}" has been specified without a value "mapped-by" field. You must specify a <value mapped-by=...> since the value is a field in the key class.
056058=The Map "{0}" has been specified with a value type of "{1}" yet the field of the value in the key class is of type "{2}"!
056059=Key class "{0}" has been defined to contain a field "{1}" that represents the value of the map but this field was not found!

056060=Can't write key from a different Persistence Manager
056061=Can't write value from a different Persistence Manager
056062=Null keys not allowed in persistent maps.
056063=Null values not allowed in persistent maps.
056064=Class {0} is not a valid key type for this Map. Must be {1}
056065=Class {0} is not a valid value type for this Map. Must be {1}
056066=Collection has been specified with an value-type "{0}" which is an interface. DataNucleus doesnt currently fully support the use of value-types that are interfaces. Please change the element-type to be a class.
056067=Field "{0}" has been defined as "mapped-by" the field "{1}" yet this "mapped-by" field doesn't exist in the class "{2}".
056068=Field "{0}" has been defined as "mapped-by" field "{1}" yet this is of an incorrect type ({2}). The field that is set as the "mapped-by" must be of type "{3}"

056069=The MetaData for the key class "{0}" of the map field "{1}" was not found.
056070=The MetaData for the value class "{0}" of the map field "{1}" was not found.

056071=Field "{0}" is a Map formed by a ForeignKey. There is no key/value "mapped-by" specified. You must specify <key mapped-by="..."> if you want to use a Map ForeignKey relation.
056072=Field "{0}" is a Map formed by a ForeignKey where the key is stored in the value object, however the value object is not PersistenceCapable (it is "{1}"). The value must be PersistenceCapable to use this type of relation.
056073=Field "{0}" is a Map formed by a ForeignKey where the value is stored in the key object, however the key object is not PersistenceCapable (it is "{1}"). The key must be PersistenceCapable to use this type of relation.
056074=Field "{0}" is a Map formed by a ForeignKey where the value is stored in the key object, however the DataNucleus doesnt currently support this type of relation.



057023=Class "{0}" has not got its own table and no subclass tables are found for this class. Creation of schema is impossible!
